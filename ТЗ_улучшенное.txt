1. Миссия и Ограничения

1.1. Миссия

Создать автономную, мультиагентную систему для алгоритмической торговли на криптовалютных рынках.

Ключевое Ограничение: На текущем этапе (MVP) система работает исключительно в режиме Paper-Trading (бумажной торговли). Переход в "live" режим с реальными средствами требует отдельного ревью и выполнения всех критериев приемки.

1.2. Цели

Начальный этап (Paper): Стабильная работа 24/7 без ошибок, подтверждение профитабильности гипотез, отладка цикла исследований (Research) и внедрения (Promotion).

Финансовые цели (Live, в будущем): Обработка начального капитала ~300 USD с целью выхода на 1 000 USD/мес. Масштабирование до 10 000 USD через улучшение стратегий и управление риском.

1.3. Ограничения

Только Paper-Trading: Система не должна иметь возможности отправлять реальные ордера до явного переключения режима.

Личное использование: На этапе MVP отсутствуют любые B2B-интеграции, Telegram-боты или внешние API для клиентов.

Фокус на устойчивость: Приоритетом является не максимальная доходность, а стабильность, повторяемость результатов и минимизация просадок (Max Drawdown).

2. Технический Стек и Окружение

Язык: Python 3.13 (строго для dev, prod и CI).

Исполнение и данные: CCXT (для REST/WebSocket), pandas, numpy.

Индикаторы: pandas-ta / TA-Lib.

Исследования (Research): vectorbt.

Качество кода: Ruff (linting/formatting), mypy (типизация), pytest, coverage.

Хранилище состояния: SQLite (основная БД в storage/crupto.db).

Хранилище аналитики: Parquet (для срезов данных по запускам reports/run_...).

Мониторинг: Prometheus (экспорт метрик) и Grafana (дашборды).

3. Архитектура и Структура Репозитория

Система разделена на два главных контура: детерминированное ядро (prod_core) и AI-оркестратор (brain_orchestrator).

brain_orchestrator/: AI-слой. Принимает решения верхнего уровня (какие стратегии включить, какой риск задать). Не имеет прямого доступа к исполнению.

prod_core/: Ядро Исполнения. Детерминированный, тестируемый код, который отвечает за получение данных, расчет индикаторов, исполнение и управление портфелем.

tools/: Инструменты Агентов. Вспомогательные скрипты, используемые агентами из brain_orchestrator.

research_lab/: Песочница. Изолированное окружение для бэктестинга и проверки новых стратегий.

configs/: Конфигурация. Статические YAML-файлы (управление, символы, карты включения).

storage/: Хранилище (runtime). Место для SQLite БД, логов. (Игнорируется .gitignore).

reports/: Отчеты. Артефакты запусков, аналитика (Parquet-файлы, .md отчеты).

scripts/: Скрипты запуска и обслуживания (run_paper.sh, vacuum_and_rotate.py).

tests/: Тесты (unit, integration, e2e).

dashboards/: Дашборды (конфигурация Grafana, алерты Prometheus).

4. Ключевые Компоненты

4.1. prod_core (Ядро Исполнения)

Детерминированный контур, запускаемый через prod_core/runner.py. AI-слой не имеет права вносить изменения в этот код "на лету".

data/feed.py: Источники данных (CCXT WebSocket/REST), нормализация тиков/свечей.

data/features.py: Расчет производных фич из потоков.

indicators/tech.py: Библиотека технических индикаторов (ATR, RSI, BB, и т.д.).

strategies/: Набор детерминированных стратегий (breakout_4h, range_rev_5m, funding_rev и т.д.), наследуемых от base.py.

risk/governor.py: Губернатор. Применяет к сигналам стратегий глобальные лимиты (max_daily_loss, max_exposure).

risk/engine.py: Движок Риска. Применяет лимиты уровня стратегии/символа.

exec/broker_ccxt.py: Абстракция над CCXT для работы с ордерами и балансом (в режиме paper).

exec/portfolio.py: Отслеживание текущего портфеля, позиций, PnL.

persist/dao.py: Data Access Object (DAO). Единственный модуль, имеющий право читать и писать в SQLite БД.

monitor/telemetry.py: Экспортер метрик состояния системы в Prometheus.

4.2. brain_orchestrator (Оркестратор AI)

Надстройка над prod_core. Управляет жизненным циклом системы, запускает и параметризует prod_core, используя brain.py как точку входа.

Состоит из 7 ключевых агентов:

BrainAgent (Главный Агент):

Точка входа. Координирует всех остальных агентов.

Принимает финальное решение о запуске/остановке prod_core.

MarketRegimeAgent (Агент Режима Рынка):

Определяет текущее состояние рынка (например, Bullish, Bearish, Range, HighVol).

Использует tools_market_regime_agent/ (классификаторы, детекторы тренда).

StrategySelectionAgent (Агент Выбора Стратегий):

На основе режима от MarketRegimeAgent, решает, какие стратегии из prod_core/strategies/ должны быть активны.

Использует configs/enable_map.yaml и tools_strategy_selection_agent/ (скоринг, cooldown).

RiskManagerAgent (Агент Управления Рисками):

Определяет параметры для активных стратегий.

Устанавливает: размер позиции, уровни StopLoss/TakeProfit, лимиты просадки.

Использует tools_risk_manager_agent/ (сайзинг, планировщик стопов).

ExecutionAgent (Агент Исполнения):

Формирует намерение (сигнал) на сделку, которое затем передается в prod_core для исполнения.

Не исполняет ордера сам, а делегирует это prod_core/runner.py.

Контролирует проскальзывание и ликвидность, используя tools_execution_agent/.

MonitorAgent (Агент Мониторинга):

Следит за здоровьем системы (heartbeats, состояние БД, задержки feed'а).

Отправляет алерты в Prometheus (настройка в configs/prometheus/alerts.yml).

Не использует Telegram на данном этапе.

ResearchAgent (Агент Исследований):

Работает только в research_lab/ (песочница).

Ищет новые стратегии, проводит бэктесты (vectorbt_runner.py), генерирует кандидатов.

Управляет процессом "Champion/Challenger".

5. Процесс Исследования и Допуска (Champion/Challenger)

Цель: Безопасное внедрение новых стратегий в prod_core.

Процесс:

ResearchAgent генерирует "кандидата" в research_lab/.

Кандидат проходит бэктесты, Walk-Forward оптимизацию и Монте-Карло симуляции.

Критерии (Gate): Кандидат должен показать:

PF (in-sample) ≥ 1.3, PF (out-of-sample) ≥ 1.1

MaxDD ≤ 1.3 × (средняя MaxDD портфеля)

Корреляция с портфелем ≤ 0.4

N_trades ≥ 200 (с учетом комиссий и спреда)

Paper: Успешный кандидат переносится в prod_core/strategies/ и запускается в paper-режиме (через enable_map.yaml).

Canary (Будущее): После paper-успеха, стратегия может быть активирована в live с минимальным риском (e.g., 0.05% капитала).

Promotion: Успешный canary-период приводит к полному включению стратегии в портфель.

6. Данные и Мониторинг

Хранилище (State): storage/crupto.db (SQLite) – хранит текущие позиции, ордера, сделки, equity. Доступ только через prod_core/persist/dao.py.

Хранилище (Analytics): reports/run_.../ (Parquet/CSV) – после каждого запуска, prod_core/persist/export_run.py выгружает данные из SQLite для анализа.

Очистка: scripts/vacuum_and_rotate.py отвечает за очистку старых логов и ротацию БД.

Дашборды: dashboards/grafana/ содержит JSON-модель дашборда, который визуализирует метрики из Prometheus.

Метрики: prod_core/monitor/telemetry.py предоставляет метрики (состояние агентов, PnL, здоровье feed'а) для Prometheus.

7. Критерии Приемки MVP (Paper-Trading)

Система (prod_core + brain_orchestrator) стабильно работает в paper режиме не менее 24 часов без критических ошибок.

Дашборд в Grafana корректно отображает:

Граф связей агентов brain_orchestrator.

Текущий PnL и equity.

Состояние здоровья feed'а и системных компонентов.

MarketRegimeAgent корректно определяет и переключает режимы, что отражается на дашборде.

StrategySelectionAgent корректно включает/выключает стратегии в prod_core в ответ на смену режима.

RiskManagerAgent (через prod_core/risk/governor.py) успешно блокирует торговлю при достижении max_daily_loss.

E2E-тест (от MarketRegime до prod_core/exec) проходит успешно.

Артефакты (логи, .parquet, summary.md) успешно создаются в reports/run_.../ после завершения сессии.